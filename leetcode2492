/*
2492. Minimum Score of a Path Between Two Cities  (Medium)

You are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads where roads[i] = [ai, bi, distancei] indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei. The cities graph is not necessarily connected.

The score of a path between two cities is defined as the minimum distance of a road in this path.

Return the minimum possible score of a path between cities 1 and n.

Note:
A path is a sequence of roads between two cities.
It is allowed for a path to contain the same road multiple times, and you can visit cities 1 and n multiple times along the path.
The test cases are generated such that there is at least one path between 1 and n.
*/

class Solution {
public:
    
    void dfs(int &minInd, vector<int> &visited,vector<vector<pair<int,int>>> &adj, int curr)
    {
        if(visited[curr]) return;
        visited[curr] = 1;
        
        for(auto it:adj[curr])
        {
            minInd = min(minInd,it.second);
            dfs(minInd,visited,adj,it.first);
            }
        return;
        
    }
  
    int minScore(int n, vector<vector<int>>& roads) {
        
        
        vector<vector<pair<int,int>>> adj(n+1);
        
        for(int i=0;i<roads.size();i++)
        {
            adj[roads[i][0]].push_back({roads[i][1],roads[i][2]});
            adj[roads[i][1]].push_back({roads[i][0],roads[i][2]});
            
        }
        int minInd = INT_MAX;
        vector<int> visited(n+1,0);
        dfs(minInd,visited,adj,1);
        return minInd;
        
    }
};
