/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   /* TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() != postorder.size())
        map<int,int> m;
        for(int i=0;i<inorder.size();i++) m[inorder[i]] = i;
        return fun(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,m);
        // return root;
        
    }
    
    TreeNode* fun(vector<int>& inorder,int inStart,int inEnd,vector<int>& postorder,int postStart,int postEnd,map<int,int> m){
        if(inStart > inEnd || postStart > postEnd) return NULL;
        
        TreeNode* root = new TreeNode(postorder[postEnd]);
        
        int rootInd = m[root->val];
        int leftInd = rootInd-inStart;
        
        root->left = fun(inorder,inStart,rootInd-1,postorder,postStart,postStart+leftInd-1,m);
        root->right = fun(inorder,rootInd+1,inEnd,postorder,postStart+leftInd,postEnd-1,m);
        
        return root;
    }*/
    
    TreeNode *Tree(vector<int>& in, int x, int y,vector<int>& po,int a,int b){
        if(x > y || a > b)return nullptr;
        TreeNode *node = new TreeNode(po[b]);
        int SI = x;  
        while(node->val != in[SI])SI++;
        node->left  = Tree(in,x,SI-1,po,a,a+SI-x-1);
        node->right = Tree(in,SI+1,y,po,a+SI-x,b-1);
        return node;
    }
    TreeNode* buildTree(vector<int>& in, vector<int>& po){
        return Tree(in,0,in.size()-1,po,0,po.size()-1);
    }
    
    
    
};
