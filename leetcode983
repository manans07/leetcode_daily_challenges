class Solution {
public:
    
   /* 
        Using recursion
    int fun(vector<int>& days, vector<int>& costs,int ind)
    {
        if(ind>=days.size()) return 0;
        
        int c1 = costs[0] + fun(days,costs,ind+1);
        
        int i;
        
        for(i=ind;i<days.size() && days[i] < days[ind]+7;i++);
        int c2 = costs[1] + fun(days,costs,i);
        
        for(i=ind;i<days.size() && days[i] < days[ind]+30;i++);
        int c3 = costs[2] + fun(days,costs,i);
        
        return min(c1,min(c2,c3));
        }*/
    
    
    
//     Using memoization
      int fun(vector<int>& days, vector<int>& costs,int ind,vector<int>& dp)
    {
        if(ind>=days.size()) return 0;
        
        if(dp[ind] != -1) return dp[ind];
          
        int c1 = costs[0] + fun(days,costs,ind+1,dp);
        
        int i;
        
        for(i=ind;i<days.size() && days[i] < days[ind]+7;i++);
        int c2 = costs[1] + fun(days,costs,i,dp);
        
        for(i=ind;i<days.size() && days[i] < days[ind]+30;i++);
        int c3 = costs[2] + fun(days,costs,i,dp);
        
        dp[ind] =  min(c1,min(c2,c3));
        return dp[ind];
        }
    
  /*  int fun(vector<int>& days, vector<int>& costs)
    {
        vector<int> dp(days.size()+1,INT_MAX-1);
        dp[days.size()] = 0;
        
        for(int k=days.size()-1;k>=0;k--)
        {
        int c1 = costs[0] + dp[k+1];
        
        int i;
        for(i=k;i<days.size() && days[i] < days[k]+7;i++);
        int c2 = costs[1] + dp[k];
        
        for(i=k;i<days.size() && days[i] < days[k]+30;i++);
        int c3 = costs[2] + dp[k];
        dp[k] = min(c1,min(c2,c3));
        }
        return dp[0];
        }*/
    
  
    
    
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        // vector<int> dp(days.size()+1,-1);    
        return fun(days,costs);
        
    }
};
