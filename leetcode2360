class Solution {
public:

    int longestCycle(vector<int>& edges) {
          
        vector<int>dist_node(edges.size(),0);
        vector<bool>extra(edges.size(), false);
        vector<bool>visited(edges.size(),false);
        int ans = -1;
         for(int i=0;i<edges.size();i++)
         {     
               if(!visited[i])
               dfs(i,dist_node, visited, edges,0, ans, extra);
         }
        
        return ans;
    }
    
     void dfs(int node, vector<int>&dist_node1, vector<bool>&visited,
              vector<int>& edges, int distance, int& ans, vector<bool>& extra)
      {          
           if(node!=-1 )
           {
               if(!visited[node] )
           {  visited[node] = true;
              extra[node]  = true;
              dist_node1[node] = distance;
             dfs(edges[node], dist_node1, visited, edges, distance+1, ans, extra);
           }
               else if(extra[node])
               {   
                   ans = max(ans, distance - dist_node1[node]);
               } 
               
               extra[node]  = false;
           }
      }
    
    /*
     int mx;
    void dfs(int node, vector<int> &edges, vector<int> &distance_from_start_node, vector<int> &visited, int current_len)
    {
        if (!visited[node]) {
            // adding the current node to the path form start node
            visited[node] = 1;
            distance_from_start_node[node] = current_len;

            if (edges[node] != -1) {
                dfs(edges[node], edges, distance_from_start_node, visited, current_len + 1);
            }
            
            // backtracking step - removing the current node from the path
            distance_from_start_node[node] = -1;
        }
        else {
            // checking if the current node makes a cycle or not
            if (distance_from_start_node[node] != -1) {
                // if it makes a cycle, then consider the number of nodes in the cycle
                mx = max(current_len - distance_from_start_node[node], mx);
            }
        }
    }
    int longestCycle(vector<int> &edges)
    {
        mx = -1;
        vector<int> visited(edges.size(), 0), length(edges.size(), -1);
        for (int i = 0; i < edges.size(); ++i) {
            if (!visited[i]) {
                dfs(i, edges, length, visited, 0);
            }
        }
        return mx;
    }
    */
    
}; 
